print('[Red.Leaf] Waiting for game to load...')
if not game:IsLoaded() then 
    game.Loaded:Wait()
end
print('[Red.Leaf] Loading...')
local TimeToLoad = tick()

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xataxell/library/main/Linoria.lua"))()
local ThemeManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/xataxell/library/main/themes.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/xataxell/library/main/saving.lua"))()
local Window = Library:CreateWindow({Title = 'Red.Leaf for Typical Colors 2', Center = true, AutoShow = true})
Library:SetWatermark('Red.Leaf')

local Aim = Window:AddTab('Aim')
local Aimbot = Aim:AddLeftGroupbox('Aimbot')
local HitboxExpander = Aim:AddRightGroupbox('Hitbox Expander')
Aimbot:AddToggle('AimbotToggle', { Text = 'Aimbot', Default = false, Tooltip = 'Moves your view to the closest player'}):AddKeyPicker('AimbotBind', { Default = 'None', NoUI = false, Mode = 'Hold', Text = 'Aimkey' })
Aimbot:AddToggle('VisibleCheck', { Text = 'Visible Check', Default = false, Tooltip = 'Checks if the target is visible'})
Aimbot:AddToggle('VisualizeFOVCircle', { Text = 'Visualize Aimbot FOV', Default = false, Tooltip = 'Makes the FOV circle for the aimbot visible'})
Aimbot:AddDropdown("AimPart", {Values = {'Head', 'UpperTorso', 'LowerTorso'}, Default = 2, Multi = false, Text = "Aim part"})
Aimbot:AddSlider('AimbotFOV', {Text = 'FOV', Default = 25, Min = 0, Max = 180, Rounding = 0, Compact = true})
Aimbot:AddSlider('Smoothing', {Text = 'Smoothing', Default = 20, Min = 1, Max = 100, Rounding = 0, Suffix = '%', Compact = true})
HitboxExpander:AddToggle('HeadHitboxExpand', { Text = 'Head Expand', Default = false, Tooltip = "Changes the size of every player's head hitbox"})
HitboxExpander:AddToggle('HeadHitboxTeamCheck', { Text = 'Team Check', Default = false, Tooltip = "Only expands the head hitbox for the enemy"})
HitboxExpander:AddToggle('HeadHitboxVisualize', { Text = 'Visualize Head Hitbox', Default = false, Tooltip = "Visualizes the head hitbox"}):AddColorPicker('HeadHitboxColor', {Default = Color3.fromRGB(224, 64, 62)})
HitboxExpander:AddSlider('HeadSize', {Text = 'Head Size', Default = 5, Min = 1, Max = 75, Rounding = 1, Suffix = ' studs', Compact = false})
HitboxExpander:AddSlider('HeadHitboxTransparency', {Text = 'Head Hitbox Transparency', Default = .75, Min = 0, Max = 1, Rounding = 2, Suffix = '', Compact = false})
HitboxExpander:AddDivider()
HitboxExpander:AddToggle('HitboxExpand', { Text = 'Hitbox Expand', Default = false, Tooltip = "Changes the size of every player's hitbox"})
HitboxExpander:AddToggle('HitboxTeamCheck', { Text = 'Team Check', Default = false, Tooltip = "Only expands the hitbox for the enemy"})
HitboxExpander:AddToggle('HitboxVisualize', { Text = 'Visualize Hitbox', Default = false, Tooltip = "Visualizes the head hitbox"}):AddColorPicker('HitboxColor', {Default = Color3.fromRGB(232, 200, 114)})
HitboxExpander:AddSlider('HitboxSize', {Text = 'Hitbox Size', Default = 5, Min = 1, Max = 75, Rounding = 1, Suffix = ' studs', Compact = false})
HitboxExpander:AddSlider('HitboxTransparency', {Text = 'Hitbox Transparency', Default = .75, Min = 0, Max = 1, Rounding = 2, Suffix = '', Compact = false})

local Visuals = Window:AddTab('Visuals')
local ESP = Visuals:AddLeftGroupbox('ESP')
local Viewmodel = Visuals:AddLeftGroupbox('Viewmodel')
local MiscVisuals = Visuals:AddRightTabbox()
local View = MiscVisuals:AddTab('View/Hud')
local Lighting = MiscVisuals:AddTab('Lighting')
ESP:AddToggle('BoundingBox', { Text = 'Box', Default = false, Tooltip = 'Toggles the bounding box visual option'}):AddColorPicker('BoundingBoxDefaultColor', {Default = Color3.fromRGB(255, 255, 255), Transparency = nil, Title = 'Box Color'})
ESP:AddToggle('BoxTeamCheck', { Text = 'Team Check', Default = false, Tooltip = 'Toggles the team check, box colors are set to selected colors for teams'}):AddColorPicker('BoundingBoxColor', {Default = Color3.fromRGB(224, 64, 62), Transparency = nil, Title = 'Enemy Box Color'}):AddColorPicker('FriendlyBoundingBoxColor', {Default = Color3.fromRGB(74, 172, 40), Transparency = nil, Title = 'Friendly Box Color'})
ESP:AddSlider('BoxFillTransparency', {Text = '', Default = 0.2, Min = 0, Max = 1, Rounding = 2, Compact = true})
ESP:AddDivider()
ESP:AddToggle('Chams', { Text = 'Chams', Default = false, Tooltip = 'Toggles player highlights / chams'}):AddColorPicker('ChamsFillColor', {Default = Color3.fromRGB(176, 141, 247), Title = 'Fill Color'}):AddColorPicker('ChamsOutlineColor', {Default = Color3.fromRGB(132, 84, 229), Title = 'Outline Color'})
ESP:AddToggle('ChamsTeamCheck', { Text = 'Team Check', Default = false, Tooltip = 'Toggles the team check, chams colors are set to selected colors for teams'}):AddColorPicker('EnemyChamsColor', {Default = Color3.fromRGB(224, 64, 62), Transparency = nil, Title = 'Enemy Chams Color'}):AddColorPicker('FriendlyChamsColor', {Default = Color3.fromRGB(74, 172, 40), Transparency = nil, Title = 'Friendly Chams Color'})
ESP:AddToggle('ChamsDepthMode', { Text = 'Always on top', Default = true, Tooltip = 'Toggles depth mode between always on top or occluded'})
ESP:AddSlider('ChamsFillTransparency', {Text = '', Default = 0.2, Min = 0, Max = 1, Rounding = 2, Compact = true})
ESP:AddSlider('ChamsOutlineTransparency', {Text = '', Default = 0, Min = 0, Max = 1, Rounding = 2, Compact = true})
ESP:AddDivider()
ESP:AddToggle('HealthBar', { Text = 'Health Bar', Default = false, Tooltip = 'Toggles the health bar visual option'}):AddColorPicker('HealthBarColor', {Default = Color3.fromRGB(255, 255, 255)})
ESP:AddToggle('Names', { Text = 'Name', Default = false, Tooltip = 'Toggles the name text visual option'})
ESP:AddToggle('Class', { Text = 'Class', Default = false, Tooltip = 'Toggles the class text visual option'})
ESP:AddToggle('Weapon', { Text = 'Weapon', Default = false, Tooltip = 'Toggles the weapon text visual option'})
ESP:AddToggle('Distance', { Text = 'Distance', Default = false, Tooltip = 'Toggles the distance text visual option'})
ESP:AddDivider()
ESP:AddDropdown("EspFont", {Values = {'UI', 'System', 'Plex', 'Monospace'}, Default = 4, Multi = false, Text = "Font"})
ESP:AddDropdown("Ignore", {Values = {'Friendly', 'Enemy'}, Default = 0, Multi = true, Text = "Ignore"})
View:AddToggle('customfov', { Text = 'FOV Modifications', Default = false, Tooltip = 'Toggles FOV Modifications'})
View:AddSlider('customfovamount', { Text = 'FOV', Default = 90, Min = 0, Max = 120, Rounding = 0, Suffix = 'Â°/120', Compact = true})
View:AddDivider()
View:AddToggle('thirdperson', { Text = 'Third Person', Default = false, Tooltip = 'Puts you into third person'}):AddKeyPicker('thirdpersonbind', { Default = 'V', NoUI = false, Mode = 'Toggle', Text = 'Third Person' })
View:AddSlider('thirdpersonoffset', {Text = 'Up Offset', Default = 110, Min = 10, Max = 250, Rounding = 0, Suffix = '', Compact = true})
View:AddToggle('NoScope', { Text = 'No Sniper Scope', Default = false, Tooltip = 'Hides the sniper scope'})
Lighting:AddDropdown("LightingTechnology", {Values = {'Voxel', 'ShadowMap', 'Legacy', 'Future', 'Compatibility'}, Default = 1, Multi = false, Text = "Lighting Technology"})
Viewmodel:AddToggle('ViewmodelOffset', { Text = 'Offset', Default = false, Tooltip = 'Sets a custom viewmodel offset'})
Viewmodel:AddSlider('ViewmodelOffsetX', {Text = 'X', Default = 0, Min = -5, Max = 5, Rounding = 1, Suffix = '', Compact = true})
Viewmodel:AddSlider('ViewmodelOffsetY', {Text = 'Y', Default = 0, Min = -5, Max = 5, Rounding = 1, Suffix = '', Compact = true})
Viewmodel:AddSlider('ViewmodelOffsetZ', {Text = 'Z', Default = 0, Min = -5, Max = 5, Rounding = 1, Suffix = '', Compact = true})

local Automation = Window:AddTab('Automation')
local Pyro = Automation:AddLeftGroupbox('Arsonist')
local Annihilator = Automation:AddRightGroupbox('Annihilator')
local Healbot = Automation:AddRightGroupbox('Healbot')
Pyro:AddToggle('autoairblast', { Text = 'Auto Airblast', Default = false, Tooltip = 'Airblasts as soon as a projectile gets too close to you'})
Pyro:AddDropdown("projectilestoairblast", {Values = {'Rockets', 'Grenades', 'Baubles', 'Baseballs', 'Flares'}, Default = 1, Multi = true, Text = "Projectiles"})
Healbot:AddToggle('healwhenlow', { Text = 'Heal self when health below:', Default = false, Tooltip = 'Heals you when your health is below the desired threshold'})
Healbot:AddSlider('healthamount', {Text = 'Health', Default = 75, Min = 10, Max = 225, Rounding = 0, Suffix = '', Compact = true})
Healbot:AddToggle('healaura', { Text = 'Heal Aura', Default = false, Tooltip = 'Heals teammates around you'})
Healbot:AddToggle('healaurafriendsonly', { Text = 'Friends only', Default = false, Tooltip = 'Only heals friends around you'})
Annihilator:AddToggle('autodetonate', { Text = 'Auto Detonate', Default = false, Tooltip = 'Detonates the stickybomb that is in the blast radius of an enemy player'})
Annihilator:AddDropdown("autodetonatemode", {Values = {'Legit', 'Rage'}, Default = 1, Multi = false, Text = "Mode"})
Annihilator:AddSlider('autodetonaterageradiusoverride', {Text = 'Rage Radius Override', Default = 100, Min = 100, Max = 200, Rounding = 0, Suffix = '%', Compact = false})

local SkinChanger = Window:AddTab('Skin Changer')
local WeaponSelection = SkinChanger:AddLeftGroupbox('Weapon Selection')
local SkinSelection = SkinChanger:AddRightGroupbox('Skin Selection')
WeaponSelection:AddDropdown("PrimarySelection", {Values = {'Lupara DB', 'Revolver'}, Default = 0, Multi = false, Text = "Primary"})
SkinSelection:AddDropdown("SkinSelectionPrimary", {Values = {'none'}, Default = 1, Multi = false, Text = "Primary Skin"})

local Misc = Window:AddTab('Misc')
local MiscMain = Misc:AddLeftTabbox()
local Movement = MiscMain:AddTab('Movement')
local Chat = MiscMain:AddTab('Chat')
local Exploits = Misc:AddRightGroupbox('Exploits')
local SpawnSentry = false
local SpawnDispenser = false
local SpawnEntrance = false
local SpawnExit = false
Movement:AddToggle('bunnyhop', { Text = 'Bunnyhop', Default = false, Tooltip = 'Lets you hold space to automatically jump and uncaps your speed'})
Movement:AddToggle('walkspeedmod', { Text = 'Speed Mod', Default = false, Tooltip = 'Changes your speed'}):AddKeyPicker('walkspeedmodbind', { Default = 'LeftShift', NoUI = false, Mode = 'Hold', Text = 'Speed Mod' })
Movement:AddDivider()
Movement:AddToggle('bunnyhopcustomspeed', { Text = 'Bunnyhop Custom Speed', Default = false, Tooltip = 'Sets a custom speed for your directional autostrafe'})
Movement:AddToggle('directionalacceleration', { Text = 'Directional Acceleration', Default = false, Tooltip = 'Makes you accelerate when using directional autostrafe'})
Movement:AddDropdown("bunnyhopautostrafe", {Values = {'None', 'Directional'}, Default = 1, Multi = false, Text = 'Auto-Strafe'})
Movement:AddSlider('bunnyhopspeed', { Text = 'Bunnyhop Speed', Default = 20, Min = 0, Max = 100, Rounding = 0, Suffix = ' studs/s', Compact = false})
Movement:AddSlider('directionalaccelerationcap', { Text = 'Directional Acceleration Cap', Default = 2.5, Min = 1, Max = 10, Rounding = 1, Suffix = 'x', Compact = false})
Movement:AddSlider('walkspeed', { Text = 'Walkspeed', Default = 20, Min = 0, Max = 200, Rounding = 0, Suffix = ' studs/s', Compact = false})
Exploits:AddToggle('infiniteammo', { Text = 'Infinite Ammo', Default = false, Tooltip = 'Gives you infinite ammo (wow)'})
Exploits:AddToggle('freebuildings', { Text = 'Free buildings', Default = false, Tooltip = 'Changes the metal cost of all buildings to 0'})
Exploits:AddToggle('instantrespawn', { Text = 'Instant Respawn', Default = false, Tooltip = 'Makes you respawn as soon as you die'})
Exploits:AddToggle('setspread', { Text = 'Set spread', Default = false, Tooltip = 'Sets your spread to desired amount'})
Exploits:AddSlider('spreadamount', { Text = 'Spread', Default = 10, Min = 0, Max = 100, Rounding = 0, Compact = true})
Exploits:AddButton('Spawn Sentry [ Engineer ]', function() SpawnSentry = true end)
Exploits:AddButton('Spawn Dispenser [ Engineer ]', function() SpawnDispenser = true end)
Exploits:AddButton('Spawn Tele Entrance [ Engineer ]', function() SpawnEntrance = true end)
Exploits:AddButton('Spawn Tele Exit [ Engineer ]', function() SpawnExit = true end)
Exploits:AddSlider('SentryLevel', { Text = 'Level', Default = 3, Min = 1, Max = 3, Rounding = 0, Suffix = '', Compact = false})

local Settings = Window:AddTab('Settings')
local MenuSettings = Settings:AddLeftGroupbox('Main')
local Config = Settings:AddRightGroupbox('Config')
local Theme = Settings:AddRightGroupbox('Theme')
MenuSettings:AddLabel('Open / Close'):AddKeyPicker('MenuKeybind', { Default = 'RightShift', NoUI = true, Text = 'Menu keybind' })
MenuSettings:AddToggle('DisableMovement', { Text = 'Disable Movement If Open', Default = false, Tooltip = 'Disables movement when the menu is open'})
MenuSettings:AddButton('Join Discord', function() 
    local res = game:GetService("HttpService"):RequestAsync({
        Url = 'http://127.0.0.1:6463/rpc?v=1',
        Method = 'POST',
        Headers = {
            ['Content-Type'] = 'application/json',
            Origin = 'https://discord.com'
        },
        Body = game:GetService('HttpService'):JSONEncode({
            cmd = 'INVITE_BROWSER',
            nonce = game:GetService('HttpService'):GenerateGUID(false),
            args = {code = 'nxnvTcTaXx'}
        })
    })
end)
MenuSettings:AddButton('Copy Discord', function() setclipboard('https://discord.gg/nxnvTcTaXx') end)
MenuSettings:AddButton('Copy Game Invite', function() setclipboard(([[Roblox.GameLauncher.joinGameInstance(%s, "%s"))]]):format(game.PlaceId, game.JobId)) end)
MenuSettings:AddButton('Rejoin', function() game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, game:GetService('Players').LocalPlayer) end)
MenuSettings:AddButton('Unload', function() Library:Unload(); cleardrawcache() end)
MenuSettings:AddDivider()
MenuSettings:AddToggle('NoKeybinds', { Text = 'Keybind Indicator', Default = false, Tooltip = 'Toggles the visibility of the keybind indicator'}):OnChanged(function()
    Library.KeybindFrame.Visible = Toggles.NoKeybinds.Value;
end)
MenuSettings:AddSlider('KeybindPositionX', {Text = 'Position X', Default = .5, Min = 0, Max = 100, Rounding = 1, Suffix = '%', Compact = false})
MenuSettings:AddSlider('KeybindPositionY', {Text = 'Position Y', Default = 50, Min = 0, Max = 100, Rounding = 1, Suffix = '%', Compact = false})
MenuSettings:AddDivider()
MenuSettings:AddToggle('NoWatermark', { Text = 'Watermark', Default = false, Tooltip = 'Toggles the visibility of the watermark'})
MenuSettings:AddSlider('WatermarkPositionX', {Text = 'Position X', Default = 1.7, Min = 0, Max = 100, Rounding = 1, Suffix = '%', Compact = false})
MenuSettings:AddSlider('WatermarkPositionY', {Text = 'Position Y', Default = 4.3, Min = 0, Max = 100, Rounding = 1, Suffix = '%', Compact = false})
MenuSettings:AddDropdown('WatermarkSettings', {Values = { 'Display Name', 'Config Name', 'Time', 'Date', 'Framerate', 'Latency' }, Default = {'Time', 'Date', 'Framerate', 'Latency'}, Multi = true, Text = 'Watermark Settings', Tooltip = 'What to show in the watermark'})
MenuSettings:AddDropdown('WatermarkColorSettings', {Values = { 'Cheat Name', 'Display Name', 'Config Name', 'Time', 'Date', 'Framerate', 'Latency' }, Default = {'Cheat Name'}, Multi = true, Text = 'Watermark Color Settings', Tooltip = 'What parts to change the color of to library accentcolor in the watermark'})

Config:AddInput('SaveManager_ConfigName',    { Text = 'Config Name' })
Config:AddDropdown('SaveManager_ConfigList', { Text = 'Config', Values = SaveManager:RefreshConfigList(), AllowNull = true })
Options.SaveManager_ConfigList:SetValues(SaveManager:RefreshConfigList()); Options.SaveManager_ConfigList:SetValue(nil)
Config:AddButton('Load', function()
    local name = Options.SaveManager_ConfigList.Value

    local success, err = SaveManager:Load(name)
    if not success then
        return Library:Notify('Failed to load config: ' .. err)
    end

    Library:Notify(string.format('Successfully loaded config: %s', name))
    ConfigName = name
end):AddButton('Save', function()
    local name = Options.SaveManager_ConfigList.Value

    local success, err = SaveManager:Save(name)
    if not success then
        return Library:Notify('Failed to save config: ' .. err)
    end

    Library:Notify(string.format('Successfully saved config: %s', name))
end)
Config:AddButton('Create', function()
    local name = Options.SaveManager_ConfigName.Value

    if name:gsub(' ', '') == '' then 
        return Library:Notify('Invalid config name (empty)', 2)
    end

    local success, err = SaveManager:Save(name)
    if not success then
        return Library:Notify('Failed to create config: ' .. err)
    end

    Library:Notify(string.format('Successfully created config: %s', name))

    Options.SaveManager_ConfigList:SetValues(SaveManager:RefreshConfigList())
    Options.SaveManager_ConfigList:SetValue(nil)
end):AddButton('Delete', function()
    local name = Options.SaveManager_ConfigList.Value

    local success, err = SaveManager:Delete(name)
    if not success then
        return Library:Notify('Failed to delete config: ' .. err)
    end

    Library:Notify(string.format('Successfully deleted config: %s', name))

    Options.SaveManager_ConfigList:SetValues(SaveManager:RefreshConfigList())
    Options.SaveManager_ConfigList:SetValue(nil)
end)

local function UpdateTheme(BackgroundColor, MainColor, AccentColor, OutlineColor, FontColor)
    Library.BackgroundColor = BackgroundColor or Library.BackgroundColor;
    Library.MainColor = MainColor or Library.MainColor;
    Library.AccentColor = AccentColor or Library.AccentColor;
    Library.AccentColorDark = Library:GetDarkerColor(AccentColor) or Library.AccentColor;
    Library.OutlineColor = OutlineColor or Library.OutlineColor;
    Library.FontColor = FontColor or Library.FontColor;

    Library:UpdateColorsUsingRegistry();
end;

local function SetDefault()       
    UpdateTheme(Color3.fromRGB(17, 17, 17), Color3.fromRGB(32, 32, 32), Color3.fromRGB(164, 158, 224), Color3.fromRGB(49, 49, 49), Color3.fromRGB(195, 195, 195))
end;

Theme:AddLabel('Accent'):AddColorPicker('AccentColor', { Default = Color3.fromRGB(164, 158, 227) });
Theme:AddDropdown("Themes", {Text = 'Presets', Default = 1, Values = { 'Default', 'Nekocheat', 'Nekocheat Blue', 'Nekocheat Orange', 'secretservice.club', 'Fatality', 'Skeet', 'Twitch', 'BLM' }})
Options.Themes:OnChanged(function()
    if Options.Themes.Value == "Default" then
        SetDefault();
    elseif Options.Themes.Value == "Nekocheat" then
        UpdateTheme(Color3.fromRGB(23, 23, 23), Color3.fromRGB(19, 19, 18), Color3.fromRGB(207, 31, 104), Color3.fromRGB(41, 41, 41), Color3.fromRGB(191, 191, 191))
    elseif Options.Themes.Value == "Nekocheat Blue" then
        UpdateTheme(Color3.fromRGB(23, 23, 23), Color3.fromRGB(19, 19, 18), Color3.fromRGB(0, 202, 209), Color3.fromRGB(41, 41, 41), Color3.fromRGB(191, 191, 191))
    elseif Options.Themes.Value == "Nekocheat Orange" then
        UpdateTheme(Color3.fromRGB(23, 23, 23), Color3.fromRGB(19, 19, 18), Color3.fromRGB(255, 99, 0), Color3.fromRGB(41, 41, 41), Color3.fromRGB(191, 191, 191))
    elseif Options.Themes.Value == "secretservice.club" then
        UpdateTheme(Color3.fromRGB(27, 27, 27), Color3.fromRGB(17, 17, 17), Color3.fromRGB(172, 156, 159), Color3.fromRGB(41, 41, 41), Color3.fromRGB(255, 255, 255))
    elseif Options.Themes.Value == "Fatality" then
        UpdateTheme(Color3.fromRGB(27, 20, 52), Color3.fromRGB(31, 26, 67), Color3.fromRGB(218, 5, 88), Color3.fromRGB(55, 48, 87), Color3.fromRGB(255, 255, 255))
    elseif Options.Themes.Value == "Skeet" then
        UpdateTheme(Color3.fromRGB(16, 16, 16), Color3.fromRGB(16, 16, 16), Color3.fromRGB(113, 143, 18), Color3.fromRGB(36, 36, 36), Color3.fromRGB(200, 200, 200))
    elseif Options.Themes.Value == "Twitch" then
        UpdateTheme(Color3.fromRGB(16, 16, 16), Color3.fromRGB(28, 31, 32), Color3.fromRGB(129, 85, 188), Color3.fromRGB(41, 41, 41), Color3.fromRGB(200, 200, 200))
    elseif Options.Themes.Value == "BLM" then
        UpdateTheme(Color3.fromRGB(0, 0, 0), Color3.fromRGB(0, 0, 0), Color3.fromRGB(0, 0, 0), Color3.fromRGB(0, 0, 0), Color3.fromRGB(255, 255, 255))
    end
end)
Options.AccentColor:OnChanged(function()
    UpdateTheme(nil, nil, Options.AccentColor.Value)
end);

Library.ToggleKeybind = Options.MenuKeybind; ThemeManager:SetLibrary(Library); SaveManager:SetLibrary(Library); SaveManager:IgnoreThemeSettings(); SaveManager:SetIgnoreIndexes({ 'MenuKeybind' }); ThemeManager:SetFolder('RedLeaf/tc2'); SaveManager:SetFolder('RedLeaf/tc2')
if game:GetService('Players').LocalPlayer and game:GetService('Players').LocalPlayer.DisplayName then
    Library:Notify('Welcome to Red.Leaf, ' .. game:GetService('Players').LocalPlayer.DisplayName .. '!', 7)
else
    Library:Notify("Red.Leaf has been initialized in " .. tostring(string.format('%.2f', tick() - TimeToLoad)) .. 's', 7)
end

game:GetService("RunService").RenderStepped:Connect(function() if Library.Unloaded then return end if Toggles.customfov.Value then game:GetService('Workspace').CurrentCamera.FieldOfView = Options.customfovamount.Value end; if Toggles.NoWatermark.Value then Library:SetWatermarkVisibility(Toggles.NoWatermark.Value) else Library:SetWatermarkVisibility(false) end; if Toggles.DisableMovement.Value and Library.Toggled then game:GetService('ContextActionService'):BindAction('FreezeMovement', function() return Enum.ContextActionResult.Sink end, false, unpack(Enum.PlayerActions:GetEnumItems())); else game:GetService('ContextActionService'):UnbindAction('FreezeMovement'); end end)

spawn(function()
    game:GetService("RunService").RenderStepped:Connect(function(frametime)
        local stringorder = "Red.Leaf"
        if Options.WatermarkSettings.Value["Display Name"] == true then
            stringorder = stringorder .. " | " .. 'User: ' .. tostring(game:GetService('Players').LocalPlayer.DisplayName)
        end
        if Options.WatermarkSettings.Value["Config Name"] == true then
            if stringorder ~= "Red.Leaf" then
                stringorder = stringorder
            end
            stringorder = stringorder .. " | " .. tostring(ConfigName)
        end
        if Options.WatermarkSettings.Value["Time"] == true then
            if stringorder ~= "Red.Leaf" then
                stringorder = stringorder
            end
            stringorder = stringorder .. " | " .. os.date('%I:%M:%S %p')
        end
        if Options.WatermarkSettings.Value["Date"] == true then
            if stringorder ~= "Red.Leaf" then
                stringorder = stringorder
            end
            stringorder = stringorder .. " | " .. os.date("%B %d") .. (os.date("%d"):sub(-1) == "1" and (os.date("%d") ~= "11" and "st" or "") or os.date("%d"):sub(-1) == "2" and (os.date("%d") ~= "12" and "nd" or "") or os.date("%d"):sub(-1) == "3" and (os.date("%d") ~= "13" and "rd" or "") or "th") .. ", " .. os.date("%Y")
        end
        if Options.WatermarkSettings.Value["Framerate"] == true then
            if stringorder ~= "Red.Leaf" then
                stringorder = stringorder
            end
255, Library.AccentColor.B * 255, math.floor(1/frametime) .. ' fps'))
        end
        if Options.WatermarkColorSettings.Value["Latency"] then
            stringorder = string.gsub(stringorder, math.floor(game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue()) .. ' ms', string.format('<font color="rgb(%d, %d, %d)">%s</font>', Library.AccentColor.R * 255, Library.AccentColor.G * 255, Library.AccentColor.B * 255, math.floor(game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue()) .. ' ms'))
        end
        Library:SetWatermark(stringorder)
    end)
end)

game:GetService("RunService").RenderStepped:Connect(function() if Toggles.customfov.Value then game:GetService('Workspace').CurrentCamera.FieldOfView = Options.customfovamount.Value end; if Toggles.NoWatermark.Value then Library:SetWatermarkVisibility(Toggles.NoWatermark.Value) else Library:SetWatermarkVisibility(false) end end)

task.spawn(function()
    while task.wait() do
        Toggles.thirdperson:SetValue(Options.thirdpersonbind:GetState())
        Toggles.walkspeedmod:SetValue(Options.walkspeedmodbind:GetState())
        if Library.Unloaded then break end
    end
end)






local function setwatermarkposition(X, Y)
    local ScreenSize = game:GetService('Workspace').CurrentCamera.ViewportSize
    local X = math.clamp((X / 100) * (ScreenSize.X - Library.Watermark.Size.X.Offset), 0, ScreenSize.X - Library.Watermark.Size.X.Offset)
    local Y = math.clamp((Y / 100) * (ScreenSize.Y - Library.Watermark.Size.Y.Offset), 0, ScreenSize.Y - Library.Watermark.Size.Y.Offset)
    Library.Watermark.Position = UDim2.new(0, X, 0, Y)
end

local function instantrespawn()
    if game:GetService('Players').LocalPlayer.PlayerGui.GUI.Client.LegacyLocalVariables.died.Value and LocalPlayer.Team == 'GRN' or game:GetService('Players').LocalPlayer.PlayerGui.GUI.Client.LegacyLocalVariables.died.Value and LocalPlayer.Team == 'RED' then
        game:GetService("ReplicatedStorage").Events.LoadCharacter:FireServer()
    end
end

local function healbotsaveself()
    if LocalPlayer:FindFirstChild('Status'):FindFirstChild('Class').Value == 'Doctor' and LocalPlayer.Character.Humanoid.Health < Options.healthamount.Value then
        game:GetService('Players').LocalPlayer.Character.Doctor.ChangeValue:FireServer('Target', tostring(LocalPlayer.Name))
    elseif LocalPlayer:FindFirstChild('Status'):FindFirstChild('Class').Value == 'Doctor' and LocalPlayer.Character.Humanoid.Health >= Options.healthamount.Value and game:GetService('Players').LocalPlayer.Character.Doctor:GetAttribute('Target') == tostring(LocalPlayer.Name) then
        game:GetService('Players').LocalPlayer.Character.Doctor.ChangeValue:FireServer('Target', '')
    end
end
